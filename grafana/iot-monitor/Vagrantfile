# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Let's try defining common stuff here
  @common_pkgs = "bash zsh vim tree htop collectd"

  config.vm.define "device" do |dev|
    # we dont use alpine here since fluentbit does not work with musl
    dev.vm.box = "generic/ubuntu1804"
    dev.vm.provider :virtualbox do |vb|
      # Emulate a low-end embedded device
      vb.memory = 512 # ubuntu does not work with 256mb ram
      vb.cpus = 1
      end

    dev.vm.network "private_network", ip: "10.1.1.10"

    dev.vm.hostname = "device"
    dev.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y #{@common_pkgs}
    SHELL
  end

  config.vm.define "bastion", primary:true do |bast|
    bast.vm.box = "generic/ubuntu2004"

    bast.vm.provider :virtualbox do |vb|
      # Emulate Azure Standard_B1ls machine (sans 4GB disk restriction)
      vb.memory = 512
      vb.cpus = 1
      end

    bast.vm.network "private_network", ip: "10.1.1.20"
    bast.vm.hostname = "bastion"
    bast.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y #{@common_pkgs}
    SHELL
  end

  config.vm.define "appserver" do |app|
    app.vm.box = "generic/ubuntu2004"

    app.vm.provider :virtualbox do |vb|
      # Emulate Azure Standard_B2s machine (sans 8GB disk restriction)
      vb.memory = 4096
      vb.cpus = 2
      end

    app.vm.network "private_network", ip: "10.1.1.30"
    app.vm.hostname = "appserver"
    app.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y #{@common_pkgs} \
        docker.io docker-compose
      adduser vagrant docker
    SHELL

    # Map port for graphite webappp
    app.vm.network "forwarded_port", guest: 8880, host: 8880, host_ip: "127.0.0.1"
    # Map port for grafana webappp
    app.vm.network "forwarded_port", guest: 3000, host: 3000, host_ip: "127.0.0.1"

    # Map fluentd ingress
    app.vm.network "forwarded_port", guest: 24224, host: 24224, host_ip: "127.0.0.1"

  end
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder ".", "/vagrant"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y tree vim htop
  # SHELL
end
