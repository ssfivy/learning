
worker_processes 4;
error_log  nginx.error.log warn;

#load_module build/ngx_http_upload_module.so;

events {
	worker_connections 128;
	use epoll;
	multi_accept on;
}

http {
	access_log nginx.access.log;

	server {
		listen 43010 default_server;

		client_max_body_size 8g;

		location /backend_uploadmodule {
			# Test http upload module

			limit_except POST {
				deny all;
			}

			#set $upload_field_name "uploaded_file";
			upload_pass @backend_upm_process; # the route to POST to when the file is uploaded

			# must match run_test.sh
			upload_store nginx-upload-minram;
			#upload_store /media/archives/nginx-upload-minram;
			upload_resumable on;
			upload_store_access user:rw group:rw all:r;
			upload_max_file_size 0; # 0 for unlimited

			# Set specified fields in request body
			upload_set_form_field $upload_field_name.name "$upload_file_name";
			upload_set_form_field $upload_field_name.content_type "$upload_content_type";
			upload_set_form_field $upload_field_name.path "$upload_tmp_path";

			# Inform backend about hash and size of a file
			upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
			upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";

			upload_pass_form_field "^submit$|^description$";

			upload_cleanup 400 404 499 500-505;

		}
		# Pass altered request body to a backend
		location @backend_upm_process {
			proxy_pass http://localhost:43020;
		}

		location /backend_fastcgi {
			# Test fastcgi backend
			proxy_request_buffering off;
			proxy_buffering off;
			proxy_max_temp_file_size 0;
		}

		location /golang_nethttp {
			# Test go's net/http
			proxy_request_buffering off;
			proxy_buffering off;
			proxy_max_temp_file_size 0;
		}
	}

	server {
		listen 43020 default_server;
		location / {
			return 200 "File received\n";
		}
	}
}
